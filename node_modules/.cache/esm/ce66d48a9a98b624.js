_9a9‍.x([["addProductToStore",()=>addProductToStore],["updateProductInStore",()=>updateProductInStore],["updateProductName",()=>updateProductName],["updateProductType",()=>updateProductType],["updateProductDescription",()=>updateProductDescription],["updateProductCost",()=>updateProductCost],["updateProductStatus",()=>updateProductStatus],["deleteProductFromStore",()=>deleteProductFromStore],["loadProducts",()=>loadProducts],["displayProducts",()=>displayProducts],["setFilterMenu",()=>setFilterMenu],["setList",()=>setList]]);/*
 * Code for adding, updating, and deleting products from the store and product database.
 */


/* A function to open database */
function openDatabase(db) {
   db = new sqlite.Database('Primary.sqlite', sqlite3.OPEN_READWRITE, (err) => {
       if (err) 
       {
           console.log(err.message);
       }
       console.log('Connected to database');
   });
}

/* A function to close database */
function closeDatabase(db) {
   db.close((err) => {
       if (err) throw err;
       console.log('Database connection closed');
   });
}


/*---------------------------------------
  Database               
-----------------------------------------*/

/* A function to add a new product to the product database */
       function addProductToStore(db, name, type="", description="", cost=0) {
   openDatabase(db);
   db.serialize(() => {
       let sql = "INSERT INTO Product (Name_Of_Product, Type_Of_Product," +
           " Description, Cost, Approved) VALUES (?,?,?,?,?)";
       db.run(sql, [name, type, description, cost, 'Pending'], (err) => {
           if (err) throw err;
           console.log(name + " is added to the list.");
       });
     });
   closeDatabase(db);
}

/* A function to update a product in the product database */
       function updateProductInStore(db, id, name, newName=null, newType=null, newDescription=null, newCost=null) {
   openDatabase(db);
   if (newName != null) updateProductName(id, name, newName);
   if (newType != null) updateProductType(id, name, newType);
   if (newDescription != null) updateProductDescription(id, name, newDescription);
   if (newCost != null) updateProductCost(id, name, newCost);
   closeDatabase(db);
}

/* A function to update a product's name in the product database */
       function updateProductName(db, id, name, newName) {
    openDatabase(db);
    db.serialize(() => {
       let sql = "UPDATE Product SET Name_Of_Product=? WHERE Product_Id=?";
       db.run(sql, [newName, id], (err) => {
           if (err) throw err;
           console.log(name + "'s name is updated to " + newName + ".");
       });
     });
    closeDatabase(db);
}

/* A function to update a product's tpe in the product database */
       function updateProductType(db, id, name, newType) {
    openDatabase(db);
    db.serialize(() => {
       let sql = "UPDATE Product SET Type_Of_Product=? WHERE Product_Id=?";
       db.run(sql, [newType, id], (err) => {
           if (err) throw err;
           console.log(name + "'s type is updated.");
       });
     });
    closeDatabase(db);
}

/* A function to update a product's description in the product database */
       function updateProductDescription(db, id, name, newDescription) {
    openDatabase(db);
    db.serialize(() => {
       let sql = "UPDATE Product SET Description=? WHERE Product_Id=?";
       db.run(sql, [newDescription, id], (err) => {
           if (err) throw err;
           console.log(name + "'s description is updated.");
       });
    });
    closeDatabase(db);
}

/* A function to update a product's cost in the product database */
       function updateProductCost(db, id, name, newCost) {
    openDatabase(db);
    db.serialize(() => {
       let sql = "UPDATE Product SET Cost=? WHERE Product_Id=?";
       db.run(sql, [newCost, id], (err) => {
           if (err) throw err;
           console.log(name + "'s cost is updated.");
       });
     });
     closeDatabase(db);
}

/* A function to update a product's status in the product database */
       function updateProductStatus(db, id, name, newStatus) {
   openDatabase(db);
   db.serialize(() => {
       let sql = "UPDATE Product SET Approved=? WHERE Product_Id=?";
       db.run(sql, [newStatus, id], (err) => {
           if (err) throw err;
           console.log(name + "'s status is updated.");
       });
     });
   closeDatabase(db);
}

/* A function to delete a product from the product database */
       function deleteProductFromStore(db, id, name) {
   openDatabase(db);
   db.serialize(() => {
       let sql = "DELETE FROM Product WHERE Product_Id=?";
       db.run(sql, [id], (err) => {
           if (err) throw err;
           console.log(name + " is deleted.");
       });
     });
   closeDatabase(db);
}

/* A function to load all products */
       function loadProducts(db, products, category) {
   openDatabase(db);
   db.serialize(() => {
       let sql = `SELECT Name_Of_Product name,
                         Cost cost
                         FROM Product`;
       switch (category) {
           case 'Mask':
               sql += " WHERE Type_Of_Product='Mask'";
               break;

           case 'PPE':
               sql += " WHERE Type_Of_Product='PPE'";
               break;

           case 'Essentials':
               sql += " WHERE Type_Of_Product='Essentials'";
               break;

           case 'Pharm':
               sql += " WHERE Type_Of_Product='Pharm'";
               break;

           case 'Other':
               sql += " WHERE Type_Of_Product='Other'";
       }

       sql += " ORDER BY Name_Of_Product";
       
       db.all(sql, (err, rows) => {
           if (err) throw err;

           if(rows){
               rows.forEach(product => {                    
                   products.push({name:product.name, cost:product.cost});
               });
           } else {
               console.log("There is no product in the store.");
           }
       });
     });
   
   closeDatabase(db);
   return products;
}

/*---------------------------------------
  Store               
-----------------------------------------*/

//const productsList = document.getElementById('products-list');
//const searchBar = document.getElementById('search-bar');

/* A function to display page based on category chosen */
       function displayProducts(products, category) {
   loadProducts(category);
   let htmlString = products.map((product) => {
       return `
       <li class="product">
           <h2>${product.name}</h2>
           <p>Price: ${product.cost}</p>
           
       </li>
       `;
   })
   .join('');
   console.log("test");
   productsList.innerHTML = htmlString;
}

/* Setting filtering menu based on category chosen */
       function setFilterMenu() {
   var menu;
   document.getElementById("filter-menu").innerHTML = menu;
}

/* Setting list of products to display based on category chosen */
       function setList() {
   var list;
   document.getElementById("product-list").innerHTML = list;
}

